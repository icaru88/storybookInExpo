{"version":3,"sources":["storybook/stories/Button/index.js","storybook/index.js","storybook/stories/Welcome/index.js","screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","screens/LinksScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","storybook/stories/CenterView/style.js","storybook/stories/CenterView/index.js","assets/fonts/SpaceMono-Regular.ttf","storybook/rn-addons.js","storybook/stories/index.js","storybook/stories/Button/Button.stories.js","storybook/stories/Welcome/Welcome.stories.js"],"names":["Button","onPress","children","defaultProps","propTypes","PropTypes","node","func","addDecorator","withKnobs","configure","require","module","StorybookUIRoot","getStorybookUI","asyncStorage","AppRegistry","registerComponent","Welcome","styles","wrapper","flex","padding","justifyContent","header","fontSize","marginBottom","content","lineHeight","showApp","event","props","preventDefault","style","this","React","Component","NotFoundScreen","navigation","View","container","Text","title","TouchableOpacity","replace","link","linkText","StyleSheet","create","backgroundColor","alignItems","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","width","height","resizeMode","marginLeft","marginHorizontal","marginVertical","codeHighlightText","borderRadius","paddingHorizontal","TabOneScreen","separator","TabTwoScreen","LinksScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","TabLinkNavigator","Ionicons","size","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","TabLinkStack","TabLinksScreen","prefixes","Linking","config","screens","Root","TabOne","TabTwo","TabLink","TabLinkScreen","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","console","warn","useCachedResources","StatusBar","main","CenterView","exports","storiesOf","getStory","add","action","linkTo"],"mappings":"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","file":"static/js/app.82f39769.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableHighlight, Text } from 'react-native';\n\nexport default function Button({ onPress, children }) {\n  return <TouchableHighlight onPress={onPress}>{children}</TouchableHighlight>;\n}\n\nButton.defaultProps = {\n  children: <Text>default</Text>,\n  onPress: () => {},\n};\n\nButton.propTypes = {\n  children: PropTypes.node,\n  onPress: PropTypes.func,\n};\n","// if you use expo remove this line\nimport { AppRegistry } from 'react-native';\n\nimport {\n  getStorybookUI,\n  configure,\n  addDecorator,\n} from '@storybook/react-native';\nimport { withKnobs } from '@storybook/addon-knobs';\n\nimport './rn-addons';\n\n// enables knobs for all stories\naddDecorator(withKnobs);\n\n// import stories\nconfigure(() => {\n  require('./stories');\n}, module);\n\n// Refer to https://github.com/storybookjs/storybook/tree/master/app/react-native#start-command-parameters\n// To find allowed options for getStorybookUI\nconst StorybookUIRoot = getStorybookUI({\n  asyncStorage: null,\n});\n\n// If you are using React Native vanilla and after installation you don't see your app name here, write it manually.\n// If you use Expo you should remove this line.\nAppRegistry.registerComponent('%APP_NAME%', () => StorybookUIRoot);\n\nexport default StorybookUIRoot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text } from 'react-native';\n\nexport default class Welcome extends React.Component {\n  styles = {\n    wrapper: {\n      flex: 1,\n      padding: 24,\n      justifyContent: 'center',\n    },\n    header: {\n      fontSize: 18,\n      marginBottom: 18,\n    },\n    content: {\n      fontSize: 12,\n      marginBottom: 10,\n      lineHeight: 18,\n    },\n  };\n\n  showApp = (event) => {\n    const { showApp } = this.props;\n    event.preventDefault();\n\n    if (showApp) {\n      showApp();\n    }\n  };\n\n  render() {\n    return (\n      <View style={this.styles.wrapper}>\n        <Text style={this.styles.header}>\n          Welcome to React Native Storybook\n        </Text>\n        <Text style={this.styles.content}>\n          This is a UI Component development environment for your React Native\n          app. Here you can display and interact with your UI components as\n          stories. A story is a single state of one or more UI components. You\n          can have as many stories as you want. In other words a story is like a\n          visual test case.\n        </Text>\n        <Text style={this.styles.content}>\n          We have added some stories inside the \"storybook/stories\" directory\n          for examples. Try editing the \"storybook/stories/Welcome.js\" file to\n          edit this message.\n        </Text>\n      </View>\n    );\n  }\n}\n\nWelcome.defaultProps = {\n  showApp: null,\n};\n\nWelcome.propTypes = {\n  showApp: PropTypes.func,\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity\n        onPress={() => navigation.replace('Root')}\n        style={styles.link}\n      >\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View\n        style={styles.separator}\n        lightColor=\"#eee\"\n        darkColor=\"rgba(255,255,255,0.1)\"\n      />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View\n        style={styles.separator}\n        lightColor=\"#eee\"\n        darkColor=\"rgba(255,255,255,0.1)\"\n      />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","// screens/LinksScreen.js\nimport * as React from 'react';\nimport StorybookUIRoot from '../storybook';\n\nexport default function LinksScreen() {\n  return <StorybookUIRoot />;\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport TabLinksScreen from '../screens/LinksScreen';\n\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList, TabLinkParamList } from '../types';\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen name=\"Links\" component={TabLinkNavigator} options={{\n        tabBarIcon: ({color}) => <TabBarIcon name='md-book' color={color}/>\n      }}\n      \n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n\nconst TabLinkStack = createStackNavigator<TabLinkParamList>();\n\nfunction TabLinkNavigator() {\n  return (\n    <TabLinkStack.Navigator>\n      <TabLinkStack.Screen\n        name=\"TabLinkScreen\"\n        component={TabLinksScreen}\n        options={{ headerTitle: 'Tab Link'}}\n      />\n    </TabLinkStack.Navigator>\n  )\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n          TabLink: {\n            screens: {\n              TabLinkScreen: 'Link',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","export default {\n  main: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { View } from 'react-native';\nimport style from './style';\n\nexport default function CenterView({ children }) {\n  return <View style={style.main}>{children}</View>;\n}\n\nCenterView.defaultProps = {\n  children: null,\n};\n\nCenterView.propTypes = {\n  children: PropTypes.node,\n};\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import '@storybook/addon-ondevice-actions/register';\nimport '@storybook/addon-ondevice-knobs/register';\n","import './Button/Button.stories';\nimport './Welcome/Welcome.stories';\n","import { action } from '@storybook/addon-actions';\nimport { text } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react-native';\nimport React from 'react';\nimport { Text } from 'react-native';\nimport Button from '.';\nimport CenterView from '../CenterView';\n\nstoriesOf('Button', module)\n  .addDecorator((getStory) => <CenterView>{getStory()}</CenterView>)\n  .add('with text', () => (\n    <Button onPress={action('clicked-text')}>\n      <Text>{text('Button text', 'Hello Button')}</Text>\n    </Button>\n  ))\n  .add('with some emoji', () => (\n    <Button onPress={action('clicked-emoji')}>\n      <Text>😀 😎 👍 💯</Text>\n    </Button>\n  ));\n","import React from 'react';\nimport { linkTo } from '@storybook/addon-links';\nimport { storiesOf } from '@storybook/react-native';\nimport Welcome from '.';\n\nstoriesOf('Welcome', module).add('to Storybook', () => (\n  <Welcome showApp={() => linkTo('Button')} />\n));\n"],"sourceRoot":""}